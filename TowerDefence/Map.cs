using Microsoft.Xna.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TowerDefence
{
    public static class Map
    {

        public static int[,] GetMap(int ID)
        {


            switch (ID)
            {

                case 1:
                    return new int[,]  // 28 / 15
                    {
                        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }, //1
                        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }, //2
                        { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }, //3
                        { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }, //4
                        { 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }, //5
                        { 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }, //6
                        { 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }, //7
                        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0  }, //8
                        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0  }, //9
                        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0  }, //10
                        { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0  }, //11
                        { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0  }, //12
                        { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0  }, //13
                        { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }, //14
                        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }, //15
                        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }, //16
                    };

                default: return new int[2, 2] { { 1, 2 }, {  1, 2 } };
                    
                    


            }


        }

        public static int[,] GetPoint(int ID)
        {

            int xSup = 64;
            int ySup = 24 + 36;

            switch (ID)
            {

                case 1:
                    return new int[,]  // 28 / 15
                    {

                        { -20           , 64 * 2  + ySup }, // Spawn


                        { 64 * 4  + xSup - 20, 64 * 2  + ySup },

                        { 64 * 4  + xSup - 10, 64 * 2  + ySup  + 1},

                        { 64 * 4  + xSup - 5, 64 * 2  + ySup + 5},

                        { 64 * 4  + xSup - 1, 64 * 2  + ySup  + 10},

                        { 64 * 4  + xSup, 64 * 2  + ySup + 20},


                        { 64 * 4  + xSup, 64 * 6  + ySup },
                        { 64 * 7  + xSup, 64 * 6  + ySup },
                        { 64 * 7  + xSup, 64 * 4  + ySup },
                        { 64 * 11 + xSup, 64 * 4  + ySup },
                        { 64 * 11 + xSup, 64 * 10 + ySup },
                        { 64 * 7  + xSup, 64 * 10 + ySup },

                        { 64 * 7  + xSup, 64 * 13 + ySup },
                        { 64 * 15  + xSup, 64 * 13 + ySup },
                        { 64 * 15  + xSup, 64 * 7 + ySup },
                        { 64 * 16  + xSup, 64 * 7 + ySup },
                        { 64 * 16  + xSup, 64 * 2 + ySup },
                        { 64 * 18  + xSup, 64 * 2 + ySup },
                        { 64 * 18  + xSup, 64 * 10 + ySup },
                        { 64 * 17  + xSup, 64 * 10 + ySup },
                        { 64 * 17  + xSup, 64 * 12 + ySup },
                        { 64 * 21  + xSup, 64 * 12 + ySup },
                        { 64 * 21  + xSup, 64 * 7 + ySup },
                        { 64 * 23  + xSup, 64 * 7 + ySup },

                        //{ 100, 200 },
                        //{ 100, 400 },
                        //{ 500, 400 },
                        //{ 500, 200 },
                        //{ 600, 200 },
                        //{ 100, 200 },

                        //{ 100, 500 },
                        //{ 800, 800 },
                        //{ 200, 200 },
                        //{ 900, 900 },
                        //{ 1000, 120 },
                        //{ 800, 400 },
                        //{ 200, 600 },
                        //{ 600, 300 },
                        //{ 700, 900 },
                    };

                default: return new int[2, 2] { { 1, 2 }, { 1, 2 } };




            }

        }


        public static void LoadMap(int Map)
        {

            int[,] map = GetMap(Map);

            Handler.InitMapPlace(map.GetLength(0), map.GetLength(1));

            for (int i = 0; i < map.GetLength(1); i++)
            {
                for (int j = 0; j < map.GetLength(0); j++)
                {

                    if (map[j, i] == 1)
                        Handler.MapPlace[i, j] = 1;


                    Handler.tiles.Add(new Tile(new Vector2(i * 64, j * 64), 1, map));

                }

            }

        }

    }


}
